;; pc88.z80

;; Defines 
#define ALU_MODE_CTRL 0x32
#define EXPANDED_ALU_CTRL 0x34 
#define EXPANDED_GVRAM_CTRL 0x35
#define IRQ_LEVEL_SET 0xe4 
#define IRQ_MASK 0xe6

#define bit0 #(1<<0)
#define bit1 #(1<<1)
#define bit2 #(1<<2)
#define bit3 #(1<<3)
#define bit4 #(1<<4)
#define bit5 #(1<<5)
#define bit6 #(1<<6)
#define bit7 #(1<<7)

#define TRUE 1 
#define FALSE 0 

SETBANK_BLUE: .macro 
	out ($5c),a
.endm
SETBANK_RED: .macro 
	out ($5d),a 
.endm
SETBANK_GREEN: .macro 
	out ($5e),a
.endm
SETBANK_MAINRAM: .macro 
	out ($5f),a 
.endm

#define CRTC_IRQ 0xf302
#define TEXT_BASE 0xf3c8

;; Macros 
DiskLoad: .macro Dst, Trk, Sec, Len, Drv
	ld hl, &Dst        
    ld de, #((&Trk << 8) | &Sec)  
    ld bc, #((&Len << 8) | &Drv) 
	call DISK_Load 
.endm

; files list 
FileTableEntry: .macro fName, track, sector, length, target
    .asciz &fName			; 9 chars exactly, z-term
	.db &track 				; 
	.db &sector 			; 
	.dw &length				;
	.dw &target
.endm ; 16 bytes 

; huffman tree node decompressed
node: .macro
    ;left index :  
    .db 0
    ;right index : 
    .db 0
    ;char:  
    .db 0
    ;index: 
    .db 0 
.endm ; 4 bytes 

Downshift4: .macro 
	srl a 
	srl a 
	srl a 
	srl a 
.endm 

EnableALU: .macro Fmem 
	ld c, ALU_MODE_CTRL
	ld a, #(0xc9 | (&Fmem << 4))
	out (c), a 
.endm 

DisableALU: .macro Fmem 
	ld c, ALU_MODE_CTRL
	ld a, #(0x89 | (&Fmem << 4))
	out (c), a 
.endm 

SetIOReg: .macro Reg, Val 
	ld c, &Reg 
	ld a, &Val 
	out (c), a 
.endm 

ExpandedGVRAM_Copy_On: .macro 
	SetIOReg EXPANDED_GVRAM_CTRL, #(0x80 | bit4)
.endm

ExpandedGVRAM_On: .macro 
	SetIOReg EXPANDED_GVRAM_CTRL, #(0x80)
.endm

ExpandedGVRAM_Off: .macro 
	SetIOReg EXPANDED_GVRAM_CTRL, #(0x0)
.endm

DrawTile: .macro TileNo, Dest
	ld de,&Dest
	ld hl,#(tileset + (64*&TileNo))
	call DRAW_TileFromDisk
.endm

TileToBuffer: .macro Src, Dst
	ld hl,&Src ; 0xc000
	ld de,%Dst ; 0xfe80
	call DRAW_Tile2Buffer
.endm 

ShiftLeftBC: .macro 
	sla c 
	rl b 
.endm

CopyMapWindowToBuffer: .macro Map, Buffer 
	ld hl,&Map 
	ld de,&Buffer 
	call COPY_MapWindow2Buffer 
.endm 

SetVBL: .macro 	
	SetIOReg IRQ_LEVEL_SET, 2 
	SetIOReg IRQ_MASK, 2
.endm 

CRT_OFF: .macro
	ld			a,%00011001				;CRT I/F 同期ビットオン
	out			($40),a
	call		WaitVBlank
	xor			a
	out			($51),a					;Reset CRTC -> Screen Format 設定*5 に続く
	
.endm

ClearRam: .macro Start, Pages
	ld hl,&Start
	ld a,0
	ld b,#(&Pages)
	.lp1:
	push bc 
	ld bc,0
	.lp2:	
	ld (hl),a 
	inc hl 
	djnz .lp2
	pop bc 
	djnz .lp1 
.endm 

Print: .macro StringAddr, X, Y, Length 
	ld hl, &StringAddr 
	ld bc, &Length 
	ld de, #(0xf3c8 + (&Y * 120) + &X)
	ldir 
.endm 

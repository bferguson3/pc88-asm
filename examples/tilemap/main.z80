;; main.z80 
.include "../../pc88.z80"

;; macros 
UpdateMapWindow: .macro 
	ld a,(ScreenShifted)
	cp 1
	jr z,.shiftscreen
	jr noshift
	
	.shiftscreen:
	xor a 
	ld (ScreenShifted),a 
	EnableALU 0
	ExpandedGVRAM_Copy_On
	call DrawMapWindow
	ExpandedGVRAM_Off
	DisableALU 0
	
	noshift:
.endm


;; defs

#define WINDOW_HEIGHT 20 
#define WINDOW_WIDTH 40 

#define map1 0x6000 ; 128x64, variable
#define map_buffer 0x8000 ; 40x20
#define map_backbuffer map_buffer + (40*20) ; 0x8320
#define _endram 0x8640


;; Main 
.org 0x100

main:
	di 
	; Set irq
	SetVBL 
	ld hl,Vblank
	ld (CRTC_IRQ),hl

	; clear ram thru 0xbfff
	ClearRam 0x8000, 0x3f 

	call InitCRTC

	; load map1 to 6000h
	DiskLoad 0x6000, 4, 1, 32, 0

	; copy map1 window to buffer 
	CopyMapWindowToBuffer map1, map_buffer
	
	; Load in tileset 
	; ALU/Expanded on 
	EnableALU 0
	ExpandedGVRAM_On
	call LoadTiles
	; copy to vram buffer
	ExpandedGVRAM_Copy_On
	call BufferTiles
	; Fill screen 40x20	
	call DrawMapWindow
	ExpandedGVRAM_Off
	DisableALU 0
	;

	ei 
loop:
	ld a,(vblDone)
	cp 1
	jr nz,loop		; idle until draw has occurred
	xor a 
	ld (vblDone),a 	; clear draw flag 
	; do nothing right now 
	
	jp loop 

;;;; Strings

hw_str:
	.asciz "Hello World!"


;;; VARIABLES
MapWidth: .db 128
MapHeight: .db 64
vblDone: .db 0
ScreenShifted: .db 0
MapOffsetX: .db 0
MapOffsetY: .db 0 


;;
.include "draw.z80"

;;
.include "../../disk.z80"

;; 
.include "window.z80"

CheckInput:
	; kb6 - reg0, bit 6
	ld c,0
	;ld hl,#(0xf3c8+(120*20))
	ld b,bit6
	.ipc:
	in a,(c)
	and b 
	;call z,print0
	;call nz,print1 
	;sla b 
	;jr nc,.ipc
	call z,ShiftWindowRight
	
	ld c,0
	in a,(c)
	ld b,bit4 
	and b 
	call z,ShiftWindowLeft

	ld c,0
	in a,(c)
	ld b,bit2 
	and b 
	call z,ShiftWindowDown

	ld c,1
	in a,(c)
	ld b,bit0 
	and b 
	call z,ShiftWindowUp

	ret 
;;;;

print0:
	push af 
	ld a,0x30
	ld (hl),a 
	inc hl 
	pop af 
	ret 

print1:
	push af 
	ld a,0x31
	ld (hl),a 
	inc hl 
	pop af 
	ret 
;;;;




Vblank:
	di 
	push af 
	push bc 
	push de 
	push hl 

	; check input 
	call CheckInput

	;map 	
	UpdateMapWindow

	; play music 
	
	; end vbl
	ld a,1
	ld (vblDone),a 

	pop hl 
	pop de 
	pop bc 
	pop af 
	
	SetVBL	
	ei
	ret
;;;;



BufferTiles:
	ld b,#24
	ld hl,0xc000
	ld de,0xfe80 
	.buffertiles:
	push bc 
	push hl 
	call DRAW_Tile2Buffer
	pop hl 
	inc hl
	inc hl 
	pop bc 
	djnz .buffertiles
	ret 
;;;;


LoadTiles:
; loads into vram first 
	ld b,#24
	ld de,0xc000				; plus 2
	ld hl,#(tileset)			; plus 64
	.loadtiles:
	push bc 
	push de 
	push hl 
	call DRAW_TileFromDisk
	pop hl 
	pop de 
	inc de 
	inc de 
	ld bc,#64 
	add hl,bc 
	pop bc 
	djnz .loadtiles
	ret
;;;;

WaitVBlank:
    in	    a,($40)
    and     $20
    jr      nz,WaitVBlank           ;bit5 一旦ディスプレイサイクルになるまで待つ
	.wait:
    in      a,($40)
    and     $20                     ;bit5 ディスプレイサイクル → VBlank になったら ret  
    jr      z,.wait
	ret

;;;;
;; Gfx 
tileset: 
	.incbin "tileset.bin"

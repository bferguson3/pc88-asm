;; main.z80 
.include "pc88.z80"

;; macros 
#define map1 0x6000
#define map_buffer 0x8000
#define _endram 0x8320

;; Main 
.org 0x100

main:
	; Hello World!
	;ld hl, #hw_str
	;ld de, #0xf3c8
	;ld bc, #13
	;ldir
	
	di 

	; load map1 to 6000h
	DiskLoad 0x6000, 4, 1, 32, 0

	; copy map1 window to buffer 
	CopyMapWindowToBuffer map1, map_buffer
	
	; ALU/Expanded on 
	EnableALU 0
	ExpandedGVRAM_On

	; Load in tileset 
	call LoadTiles

	; copy to vram buffer
	ExpandedGVRAM_Copy_On
	call BufferTiles

	; Fill screen 40x20	
	call DrawMapWindow

	ExpandedGVRAM_Off
	DisableALU 0

loop:
	jr loop

;;;; Strings

hw_str:
	.asciz "Hello World!"


;;; VARIABLES
MapWidth: .db 128


;;
.include "draw.z80"

;;
.include "disk.z80"


DrawMapWindow:
	;; Draw Tile From Map --- Buffer 
	ld a,#20
	ld ($02),a 
	ld hl,map_buffer
	ld bc,40*256	; X tile counter 
	ld de,0xc000 	; set tile destination
	.rowloop:
	push bc 
	ld a,(hl)	; multiply A by 16 
	ld c,a 		; a to bc
	ld b,0
	ShiftLeftBC
	ShiftLeftBC
	ShiftLeftBC
	ShiftLeftBC ; x 16
	push hl 
	ld hl,0xfe80	; add to buffer addr
	add hl,bc 
	push de 
	call DRAW_TileFromBuffer
	pop de 
	pop hl 
	inc hl 			; next tile byte 
	inc de 
	inc de 			; 2 bytes to the right 
	pop bc 
	djnz .rowloop
	ld bc,0x280-80
	ex de,hl 
	add hl,bc 
	ex de,hl 
	ld a,($02)
	dec a 
	ld ($02),a 
	cp #0
	ld bc,40*256
	jp nz,.rowloop 
	ret
;;;;


BufferTiles:
	ld b,#24
	ld hl,0xc000
	ld de,0xfe80 
	.buffertiles:
	push bc 
	push hl 
	call DRAW_Tile2Buffer
	pop hl 
	inc hl
	inc hl 
	pop bc 
	djnz .buffertiles
	ret 
;;;;


LoadTiles:
	ld b,#24
	ld de,0xc000				; plus 2
	ld hl,#(tileset)			; plus 64
	.loadtiles:
	push bc 
	push de 
	push hl 
	call DRAW_TileFromDisk
	pop hl 
	pop de 
	inc de 
	inc de 
	ld bc,#64 
	add hl,bc 
	pop bc 
	djnz .loadtiles
	ret
;;;;

;;;;
;; Gfx 
tileset: 
	.incbin "tileset.bin"
